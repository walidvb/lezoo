<?php

/**
 * @file
 * Fieldwise conflict prevention and resolution.
 * @author Brandon Bergren
 */

/**
 * @todo
 *   - Figure out what to do about dependencies between fields?
 *   - Come up with a cleaner way to compare fields than the current hashing.
 *   - Figure out a way to inform the user as to what the other side of the conflict is?
 *   - Handle things that aren't fields?
 *   - Handle non-nodes?
 *   - Limit to specific node types?
 *   - Handle title!
 */

/**
 * Implements hook_form_FORM_ID_alter() for node_form.
 */
function conflict_form_node_form_alter(&$form, &$form_state) {
  // Force caching enabled so the original $form['node'] survives multiple page requests.
  $form_state['cache'] = TRUE;
}

/**
 * Implements hook_node_validate().
 */
function conflict_node_validate($node, &$form, &$form_state) {
  if (isset($node->nid) && (node_last_changed($node->nid) > $node->changed)) {
    // We only support nodes for now.
    $entity_type = 'node';

    // Bypass the core conflict detector.
    $errors = &drupal_static('form_set_error', array());
    if (!empty($errors['changed'])) {
      unset($errors['changed']);
      // Remove the message as well.
      foreach ($_SESSION['messages']['error'] as $k => $v) {
        if ($v == t('The content on this page has either been modified by another user, or you have already submitted modifications using this form. As a result, your changes cannot be saved.')) {
          unset($_SESSION['messages']['error'][$k]);
          $_SESSION['messages']['error'] = array_values($_SESSION['messages']['error']);
        }
        if (empty($_SESSION['messages']['error'])) {
          unset($_SESSION['messages']['error']);
        }
      }
    }

    $nodes = array();
    // Base node: The common ancestor that was cached when beginning the node edit.
    $nodes['base'] = clone($form_state['node']);
    // Theirs: The current state of the node, with the changes that happened in parallel.
    $nodes['theirs'] = clone(node_load($node->nid, NULL, TRUE));
    // Mine: The node that was about to be saved.
    $nodes['mine'] = clone($node);

    // Dig through the fields looking for conflicts.
    $conflicting = FALSE; // Assume we can fix things unless proven otherwise.
    $updated = FALSE;
    $bundle = field_extract_bundle($entity_type, $nodes['mine']);
    $instances = field_info_instances($entity_type, $bundle);
    $entity_info = entity_get_info($entity_type);
    $extra = field_info_extra_fields($entity_type, $bundle, 'form');

    if ($entity_type == 'node') {
      $instances[] = array(
        'field_name' => 'title',
        'label' => $extra['title']['label'],
      );
      // Pretend node title is a real field.
      foreach (array('base', 'theirs', 'mine') as $k) {
        if (!is_array($nodes[$k]->title)) {
          $nodes[$k]->title = array(FALSE => array($nodes[$k]->title));
        }
      }
    }

    foreach ($instances as $instance) {
      $field_name = $instance['field_name'];
      $langcode = field_language('node', $nodes['mine'], $field_name);
      foreach (array('base', 'theirs', 'mine') as $k) {
        $f[$k] = isset($nodes[$k]->{$field_name}[$langcode]) ? $nodes[$k]->{$field_name}[$langcode] : array();
        // Checksum the data so it's directly comparable.
        $sum[$k] = md5(serialize($f[$k]));
      }

      if ($sum['base'] == $sum['theirs']) {
        // No changes, or only mine changed.
        // We don't need to do anything about this field.
        continue;
      }
      elseif ($sum['base'] == $sum['mine']) {
        // Only theirs changed. We need to update our value.
        $value = $f['theirs'];
        if ($field_name == 'title') {
          // Title is not really a field.
          $value = $value[0];
        }
//        form_set_value($form[$field_name], $value, $form_state);
        // Forget the user-submitted value.
        unset($form_state['input'][$field_name]);
        drupal_set_message(t('The @label field was changed by another user. Please verify the updated value.', array('@label' => $instance['label'])), 'warning');
        $updated = TRUE;
      }
      else {
        // Conflict!
        $conflicting = TRUE;
        $updated = TRUE;
        drupal_set_message(t('The @label field was changed by another user while you were editing it. Save again to overwrite it.', array('@label' => $instance['label'])), 'error');
      }
    }

    if ($updated) {
      // Reload the node to pick up the updated data.
      $node = clone($nodes['theirs']);
      $node->title = $node->title[FALSE][0];
      node_object_prepare($node);
      $form_state['node'] = $node;
      $form_state['rebuild'] = TRUE;
    }
  }
}