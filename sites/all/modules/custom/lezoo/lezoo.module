<?php
module_load_include('inc', 'lezoo', 'date');
module_load_include('inc', 'lezoo', 'date_filter');
module_load_include('inc', 'lezoo', 'modal');

//------------- New date formatter of form <span>fri</span><span>23</span>

//-------------Give permission to logged in user to view ALL unpublished content

function lezoo_permission() {
  return array(
    'unconditionally view unpublished content' => array(
      'title' => t('Unconditionally View Unpublished Content'),
      'restrict access' => TRUE
      )
    );
}

function lezoo_node_access($node, $op, $account) {
  // We're only bothered about the 'view' operation at the moment
  if ($op == 'view') {
    // If the user has access to our new permission, let 'em at it
    if (user_access('unconditionally view unpublished content', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  // For everything else let the system decide.
  return NODE_ACCESS_IGNORE;
}


function lezoo_entity_info_alter(&$entity_info){
  $entity_info['node']['view modes']['mini'] = array(
    'label' => t('Mini'),
    'custom settings' => TRUE,
    );
  $entity_info['field_collection_item']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
    );
  $entity_info['field_collection_item']['view modes']['mini'] = array(
    'label' => t('Mini'),
    'custom settings' => TRUE,
    );
}

function lezoo_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "event_node_form") {   
    $form['#validate'][]='lezoo_taxonomy_length_check';
  }
}

function lezoo_taxonomy_length_check($form, &$form_state) {
  $artists = array_merge($form_state['values']['field_artist']['und'], $form_state['values']['field_vjs']['und']);
  $threshold = 4;

  foreach ($artists as $artist) {
    if(gettype($artist) == 'array' && isset($artist['field_origin']))
    { 
     $artist_origin = $artist['field_origin']['und'];
    foreach($artist_origin as $origin)
    {

      if (strlen($origin['name']) > $threshold ) {
        form_set_error('field_origin', t("Les origines ne peuvent pas faire plus que @threshold lettres", array(@threshold => $threshold)));
      }      
    }
   }
 }
}